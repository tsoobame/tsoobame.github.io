{"pageProps":{"post":{"title":"Local docker registry mirror","date":"2022-09-05","description":"Why I configured a docker registry in my local machine to improve my development process","thumbnail":{"url":"/images/docker-registry-mirror.jpeg","attribution":{"name":"Guillaume Bolduc","url":"https://unsplash.com/@guibolduc"}},"tags":["docker","development","tools"],"filePath":"docker-registry-mirror.mdx","slug":"docker-registry-mirror","mdxSource":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    h2: \"h2\",\n    p: \"p\",\n    ul: \"ul\",\n    li: \"li\",\n    pre: \"pre\",\n    code: \"code\",\n    img: \"img\",\n    a: \"a\"\n  }, _provideComponents(), props.components), {Mermaid} = _components;\n  if (!Mermaid) _missingMdxReference(\"Mermaid\", true);\n  return _jsxs(_Fragment, {\n    children: [\"import { Mermaid } from 'mdx-mermaid/lib/Mermaid';\", \"\\n\", _jsx(_components.h1, {\n      children: \"Docker Registry Local Mirror\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Why I needed it\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"I recently started working on some personal projects to do and learn things that I had in my TODO list for a very long time.\\nOne the moments when I work on it is during my (long) commuting times when I go to the office or somewhere else by train.\\nIn order to get my docker images I need internet connection provided by my phone and it brings a couple of problems:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"I don't have a large amount of GB per month so I am exhausting my available data pretty soon.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"When I am in tunnels, etc. the connection is dropped.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"When docker images are new, there is no way to escape it, but I usually use the same docker images for the same projects. Once they\\nare downloaded there is no problem but I like keeping the amount of images in my system under control, so I want to be able to do:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-bash\",\n        children: \"docker rmi -f $(docker images -aq)\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"often.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"I thought that if would be cool to have a mirror of the docker registry with the images I use so I can keep running this command and \", _jsx(_components.code, {\n        children: \"pull\"\n      }), \" the images\\nfrom my computer.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"That's why I decided to try out and add a docker registri mirror in my machine. And it turned out much easier than I expected.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"How it works\"\n    }), \"\\n\", _jsx(\"div\", {\n      style: {\n        display: \"none\"\n      },\n      children: _jsx(Mermaid, {\n        chart: \"sequenceDiagram\\n\\nactor me\\nparticipant DockerDaemon\\nparticipant RegistryMirror\\nparticipant DockerRegistry\\n\\n\\nme ->>+ DockerDaemon: docker-compose(up)\\nDockerDaemon ->> RegistryMirror: start\\nDockerDaemon -->>- me: ok\\n\\nrect rgb(200,230,250)\\n    note right of me: Online / First pull\\n\\n    me ->>+ DockerDaemon: pull(ubuntu)\\n    DockerDaemon ->> RegistryMirror: pull(ubuntu)\\n    RegistryMirror ->> DockerRegistry: pull(ubuntu)\\n    DockerRegistry -->> RegistryMirror: ubuntu\\n    RegistryMirror ->> RegistryMirror: store(ubuntu)\\n    RegistryMirror -->> DockerDaemon: ubuntu\\n    DockerDaemon -->> me: \\nend\\n\\nrect rgb(200,230,250)\\n    note right of me: Offline / Second pull\\n\\n    me ->>+ DockerDaemon: pull(ubuntu)\\n    DockerDaemon ->> RegistryMirror: pull(ubuntu)\\n    RegistryMirror -->> DockerDaemon: ubuntu\\n    DockerDaemon -->> me: \\nend\\n\\nrect rgb(200,230,250)\\n    note right of me: Offline / First pull\\n\\n    me ->>+ DockerDaemon: pull(alpine)\\n    DockerDaemon ->> RegistryMirror: pull(alpine)\\n    RegistryMirror -x DockerRegistry: pull(alpine)\\n    RegistryMirror --x DockerDaemon: error\\n    DockerDaemon --x me: error\\nend\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.img, {\n        src: \"https://tsoobame.github.io/images/posts/docker-registry-mermaid.png\",\n        alt: \"docker registry sequence diagram\"\n      }), \"\\n\", _jsx(\"sub\", {\n        children: \"I did not configure mermaid in my blog yet. I will replace the image with the diagram when it is ready\"\n      })]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"How can you use it\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The code and the explanation on how to use it can be found in the \", _jsx(_components.a, {\n        href: \"https://github.com/tonitienda/docker-registry-mirror\",\n        children: \"docker-registry-mirror repository\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Happy (and low data usage) programming!\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{},"scope":{}},"markdown":"# Docker Registry Local Mirror\n\n## Why I needed it\n\nI recently started working on some personal projects to do and learn things that I had in my TODO list for a very long time.\nOne the moments when I work on it is during my (long) commuting times when I go to the office or somewhere else by train.\nIn order to get my docker images I need internet connection provided by my phone and it brings a couple of problems:\n\n- I don't have a large amount of GB per month so I am exhausting my available data pretty soon.\n- When I am in tunnels, etc. the connection is dropped.\n\nWhen docker images are new, there is no way to escape it, but I usually use the same docker images for the same projects. Once they\nare downloaded there is no problem but I like keeping the amount of images in my system under control, so I want to be able to do:\n\n```bash\ndocker rmi -f $(docker images -aq)\n```\n\noften.\n\nI thought that if would be cool to have a mirror of the docker registry with the images I use so I can keep running this command and `pull` the images\nfrom my computer.\n\nThat's why I decided to try out and add a docker registri mirror in my machine. And it turned out much easier than I expected.\n\n## How it works\n\n<div style={{ display: \"none\"}}>\n\n```mermaid\nsequenceDiagram\n\nactor me\nparticipant DockerDaemon\nparticipant RegistryMirror\nparticipant DockerRegistry\n\n\nme ->>+ DockerDaemon: docker-compose(up)\nDockerDaemon ->> RegistryMirror: start\nDockerDaemon -->>- me: ok\n\nrect rgb(200,230,250)\n    note right of me: Online / First pull\n\n    me ->>+ DockerDaemon: pull(ubuntu)\n    DockerDaemon ->> RegistryMirror: pull(ubuntu)\n    RegistryMirror ->> DockerRegistry: pull(ubuntu)\n    DockerRegistry -->> RegistryMirror: ubuntu\n    RegistryMirror ->> RegistryMirror: store(ubuntu)\n    RegistryMirror -->> DockerDaemon: ubuntu\n    DockerDaemon -->> me: \nend\n\nrect rgb(200,230,250)\n    note right of me: Offline / Second pull\n\n    me ->>+ DockerDaemon: pull(ubuntu)\n    DockerDaemon ->> RegistryMirror: pull(ubuntu)\n    RegistryMirror -->> DockerDaemon: ubuntu\n    DockerDaemon -->> me: \nend\n\nrect rgb(200,230,250)\n    note right of me: Offline / First pull\n\n    me ->>+ DockerDaemon: pull(alpine)\n    DockerDaemon ->> RegistryMirror: pull(alpine)\n    RegistryMirror -x DockerRegistry: pull(alpine)\n    RegistryMirror --x DockerDaemon: error\n    DockerDaemon --x me: error\nend\n```\n</div>\n\n![docker registry sequence diagram](https://tsoobame.github.io/images/posts/docker-registry-mermaid.png)\n<sub>I did not configure mermaid in my blog yet. I will replace the image with the diagram when it is ready</sub>\n\n## How can you use it\n\nThe code and the explanation on how to use it can be found in the [docker-registry-mirror repository](https://github.com/tonitienda/docker-registry-mirror). \n\n\nHappy (and low data usage) programming!"}},"__N_SSG":true}