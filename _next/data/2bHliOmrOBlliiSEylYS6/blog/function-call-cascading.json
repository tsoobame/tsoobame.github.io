{"pageProps":{"post":{"title":"Function call cascading considered harmful","date":"2023-05-24","description":"Function call cascading hits the composability, testability and reusability of software components and should be avoided in preference for sequential and explicit function calling.","thumbnail":{"url":"function-call-cascading.jpg","attribution":{"name":"Sarah Doffman","url":"https://unsplash.com/@sarahdoffman?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText"}},"tags":["software","anti-patterns","composition"],"filePath":"function-call-cascading.mdx","slug":"function-call-cascading","mdxSource":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    h2: \"h2\",\n    p: \"p\",\n    h3: \"h3\",\n    mermaid: \"mermaid\",\n    div: \"div\",\n    pre: \"pre\",\n    code: \"code\",\n    span: \"span\",\n    blockquote: \"blockquote\",\n    ul: \"ul\",\n    li: \"li\",\n    strong: \"strong\",\n    a: \"a\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h1, {\n      children: \"Function call cascading considered harmful\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Introduction\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Improving the reusability and composability of software components is a common goal we all strive for. However, more often than not, we find ourselves falling short without a clear understanding of why. Sometimes, we favor one approach over another without a solid rationale, labeling the differences as mere programming styles.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"In my case, I have a preference for writing code that reads like recipes. I strive to develop functions or components as if they will be utilized by multiple clients, even if that's not the current scenario. This personal style offers benefits such as reusability and testability, but I have also realized that it tends to veer toward overengineering, so it's important to keep that in check.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"During a recent refactoring process, I encountered a situation where the code followed a different style, and I found it more challenging to reason about, test, and reuse. Yet, I couldn't pinpoint a specific term or a clear, general rationale to explain why I felt that way.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Upon reflection, I discovered the root of the problem, and with the help of Chat GPT, I uncovered the terms associated with those distinct styles.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"To illustrate the problem clearly and make it more apparent, I will provide an example.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"The problem\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Consider a web application that processes user registrations. When a new user signs up, various tasks need to be performed, such as validating the user's data, creating a user account, sending a confirmation email, and logging the registration event.\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Function call cascading\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"One way of implementing this functionality is using function call cascading.\\nWe can visualize it as a sequence:\"\n    }), \"\\n\", _jsx(_components.mermaid, {\n      chart: \"\\n  sequenceDiagram\\n\\n  actor Client\\n  participant registerUser\\n  participant validateUser\\n  participant createUser\\n  participant sendConfirmationEmail\\n  participant logRegistration\\n\\n  registerUser ->> validateUser: userData\\n  validateUser ->> createUser: userData\\n  createUser ->> sendConfirmationEmail: userData\\n  sendConfirmationEmail ->> logRegistration: userData\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"And the code would look like:\"\n    }), \"\\n\", _jsx(_components.div, {\n      className: \"remark-highlight\",\n      children: _jsx(_components.pre, {\n        className: \"language-javascript\",\n        children: _jsxs(_components.code, {\n          className: \"language-javascript\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"function\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token function\",\n            children: \"registerUser\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token parameter\",\n            children: \"userData\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"{\"\n          }), \"\\n  \", _jsx(_components.span, {\n            className: \"token function\",\n            children: \"validateUser\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"userData\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"}\"\n          }), \"\\n\\n\", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"function\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token function\",\n            children: \"validateUser\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token parameter\",\n            children: \"userData\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"{\"\n          }), \"\\n  \", _jsx(_components.span, {\n            className: \"token keyword control-flow\",\n            children: \"if\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"userData\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), _jsx(_components.span, {\n            className: \"token property-access\",\n            children: \"username\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"&&\"\n          }), \" userData\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), _jsx(_components.span, {\n            className: \"token property-access\",\n            children: \"email\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"&&\"\n          }), \" userData\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), _jsx(_components.span, {\n            className: \"token property-access\",\n            children: \"password\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"{\"\n          }), \"\\n    \", _jsx(_components.span, {\n            className: \"token function\",\n            children: \"createUser\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"userData\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n  \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"}\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token keyword control-flow\",\n            children: \"else\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"{\"\n          }), \"\\n    \", _jsx(_components.span, {\n            className: \"token console class-name\",\n            children: \"console\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), _jsx(_components.span, {\n            className: \"token method function property-access\",\n            children: \"log\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"Invalid user data.\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n  \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"}\"\n          }), \"\\n\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"}\"\n          }), \"\\n\\n\", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"function\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token function\",\n            children: \"createUser\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token parameter\",\n            children: \"userData\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"{\"\n          }), \"\\n  \", _jsx(_components.span, {\n            className: \"token comment\",\n            children: \"// Logic to create a user account\"\n          }), \"\\n\\n  \", _jsx(_components.span, {\n            className: \"token function\",\n            children: \"sendConfirmationEmail\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"userData\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"}\"\n          }), \"\\n\\n\", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"function\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token function\",\n            children: \"sendConfirmationEmail\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token parameter\",\n            children: \"userData\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"{\"\n          }), \"\\n  \", _jsx(_components.span, {\n            className: \"token comment\",\n            children: \"// Logic to send a confirmation email\"\n          }), \"\\n\\n  \", _jsx(_components.span, {\n            className: \"token function\",\n            children: \"logRegistration\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"userData\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"}\"\n          }), \"\\n\\n\", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"function\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token function\",\n            children: \"logRegistration\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token parameter\",\n            children: \"userData\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"{\"\n          }), \"\\n  \", _jsx(_components.span, {\n            className: \"token comment\",\n            children: \"// Logic to log the registration event\"\n          }), \"\\n\\n  \", _jsx(_components.span, {\n            className: \"token console class-name\",\n            children: \"console\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), _jsx(_components.span, {\n            className: \"token method function property-access\",\n            children: \"log\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"User registration completed.\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"}\"\n          }), \"\\n\"]\n        })\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The code will run in sequence, one function after another. If one function fails the next\\none will not be executed.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"From a functional point of view, this works as expected and \", _jsx(_components.code, {\n        children: \"registerUser\"\n      }), \" will do what\\nit is intended to.\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Function Orchestration\"\n    }), \"\\n\", _jsxs(_components.blockquote, {\n      children: [\"\\n\", _jsx(_components.p, {\n        children: \"Function orchestration: a component organizes and decides the order and need to execute a given set\\nof functions. (I had some troubles naming this style. Let me know if there are better / existing names)\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Another way to implement the same functionality is to use a recipe-like sequence of functions\\nto be executed.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"As a sequence it would look like:\"\n    }), \"\\n\", _jsx(_components.mermaid, {\n      chart: \"\\n  sequenceDiagram\\n\\n  actor Client\\n  participant registerUser\\n  participant validateUser\\n  participant createUser\\n  participant sendConfirmationEmail\\n  participant logRegistration\\n\\n  registerUser ->> validateUser: userData\\n  registerUser ->> createUser: userData\\n  registerUser ->> sendConfirmationEmail: userData\\n  registerUser ->> logRegistration: userData\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"And this is the code:\"\n    }), \"\\n\", _jsx(_components.div, {\n      className: \"remark-highlight\",\n      children: _jsx(_components.pre, {\n        className: \"language-javascript\",\n        children: _jsxs(_components.code, {\n          className: \"language-javascript\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"function\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token function\",\n            children: \"registerUser\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token parameter\",\n            children: \"userData\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"{\"\n          }), \"\\n  \", _jsx(_components.span, {\n            className: \"token keyword control-flow\",\n            children: \"if\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token function\",\n            children: \"validateUser\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"userData\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"{\"\n          }), \"\\n    \", _jsx(_components.span, {\n            className: \"token function\",\n            children: \"createUser\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"userData\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n    \", _jsx(_components.span, {\n            className: \"token function\",\n            children: \"sendConfirmationEmail\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"userData\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n    \", _jsx(_components.span, {\n            className: \"token function\",\n            children: \"logRegistration\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), \"userData\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n    \", _jsx(_components.span, {\n            className: \"token console class-name\",\n            children: \"console\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), _jsx(_components.span, {\n            className: \"token method function property-access\",\n            children: \"log\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"User registration completed.\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n  \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"}\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token keyword control-flow\",\n            children: \"else\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"{\"\n          }), \"\\n    \", _jsx(_components.span, {\n            className: \"token console class-name\",\n            children: \"console\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), _jsx(_components.span, {\n            className: \"token method function property-access\",\n            children: \"log\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"Invalid user data.\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n  \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"}\"\n          }), \"\\n\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"}\"\n          }), \"\\n\\n\", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"function\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token function\",\n            children: \"validateUser\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token parameter\",\n            children: \"userData\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"{\"\n          }), \"\\n  \", _jsx(_components.span, {\n            className: \"token keyword control-flow\",\n            children: \"return\"\n          }), \" userData\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), _jsx(_components.span, {\n            className: \"token property-access\",\n            children: \"username\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"&&\"\n          }), \" userData\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), _jsx(_components.span, {\n            className: \"token property-access\",\n            children: \"email\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"&&\"\n          }), \" userData\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), _jsx(_components.span, {\n            className: \"token property-access\",\n            children: \"password\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \";\"\n          }), \"\\n\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"}\"\n          }), \"\\n\\n\", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"function\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token function\",\n            children: \"createUser\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token parameter\",\n            children: \"userData\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"{\"\n          }), \"\\n  \", _jsx(_components.span, {\n            className: \"token comment\",\n            children: \"// Logic to create a user account\"\n          }), \"\\n\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"}\"\n          }), \"\\n\\n\", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"function\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token function\",\n            children: \"sendConfirmationEmail\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token parameter\",\n            children: \"userData\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"{\"\n          }), \"\\n  \", _jsx(_components.span, {\n            className: \"token comment\",\n            children: \"// Logic to send a confirmation email\"\n          }), \"\\n\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"}\"\n          }), \"\\n\\n\", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"function\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token function\",\n            children: \"logRegistration\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token parameter\",\n            children: \"userData\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"{\"\n          }), \"\\n  \", _jsx(_components.span, {\n            className: \"token comment\",\n            children: \"// Logic to log the registration event\"\n          }), \"\\n\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"}\"\n          }), \"\\n\"]\n        })\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Analysis\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Although the example is very basic and might be obvious that something is off in the first example,\\nI have seen this style in multiple projects I have worked on. Usually hidden in complex logic.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"In the following subsections you can find some of the reasons why the second approach should be preferred.\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Objective coupling\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"When employing function call cascading, all functions become tightly coupled to the objectives of the functions they call down the line.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"For instance, let's consider the \", _jsx(_components.code, {\n        children: \"registerUser\"\n      }), \" function with the following goals:\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Validate user\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Create user\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Send confirmation email\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Log registration\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"In this case, the \", _jsx(_components.code, {\n        children: \"validateUser\"\n      }), \" function will \", _jsx(_components.strong, {\n        children: \"inherit\"\n      }), \" the same goals as \", _jsx(_components.code, {\n        children: \"registerUser\"\n      }), \". Similarly, the \", _jsx(_components.code, {\n        children: \"createUser\"\n      }), \" function will inherit all goals except for the validation of the user, and so on.\"]\n    }), \"\\n\", _jsx(_components.mermaid, {\n      chart: \"\\nflowchart LR\\n\\nsubgraph Functions\\n  registerUser\\n  validateUser\\n  createUser\\n  sendConfirmationEmail\\n  logRegistration\\nend\\n\\nsubgraph Goals\\n  validate-user[validate user]\\n  create-user[create user]\\n  send-confirmation-email[send confirmation email]\\n  log-registration[log registration]\\nend\\n\\nregisterUser --> validateUser\\nregisterUser -.- validate-user\\nregisterUser -.- create-user\\nregisterUser -.- send-confirmation-email\\nregisterUser -.- log-registration\\n\\n\\nvalidateUser --> createUser\\nvalidateUser -.->validate-user\\nvalidateUser -.- create-user\\nvalidateUser -.- send-confirmation-email\\nvalidateUser -.- log-registration\\n\\n\\ncreateUser --> sendConfirmationEmail\\ncreateUser -.->create-user\\ncreateUser -.- send-confirmation-email\\ncreateUser -.- log-registration\\n\\n\\nsendConfirmationEmail --> logRegistration\\nsendConfirmationEmail -.->send-confirmation-email\\nsendConfirmationEmail -.- log-registration\\n\\n\\nlogRegistration -.->log-registration\"\n    }), \"\\n\", _jsx(_components.mermaid, {\n      chart: \"\\nflowchart LR\\n\\nsubgraph Functions\\n  registerUser\\n  validateUser\\n  createUser\\n  sendConfirmationEmail\\n  logRegistration\\nend\\n\\nsubgraph Goals\\n  validate-user[validate user]\\n  create-user[create user]\\n  send-confirmation-email[send confirmation email]\\n  log-registration[log registration]\\nend\\n\\nregisterUser --> validateUser\\nregisterUser --> createUser\\nregisterUser --> sendConfirmationEmail\\nregisterUser --> logRegistration\\n\\nregisterUser -.- validate-user\\nregisterUser -.- create-user\\nregisterUser -.- send-confirmation-email\\nregisterUser -.- log-registration\\n\\n\\nvalidateUser -.->validate-user\\n\\ncreateUser -.->create-user\\n\\nsendConfirmationEmail -.->send-confirmation-email\\n\\nlogRegistration -.->log-registration\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"This means that I cannot use any of the intermediate functions in a different context than the one aimed at achieving all those goals.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"I intentionally use the term \", _jsx(_components.strong, {\n        children: \"inherit\"\n      }), \" because the problem is reminiscent of the issues that arise when using inheritance for code reusability.\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Single responsibility\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"In line with the issue of objective coupling, every function that calls another function becomes coupled with the responsibilities of the subsequent function. While this coupling may make sense in some cases, such as the \", _jsx(_components.code, {\n        children: \"registerUser\"\n      }), \" function being responsible for all the effects (storing in a database, sending emails, etc.) related to user registration, even if it delegates each effect to a specific function.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"On the other hand, the \", _jsx(_components.code, {\n        children: \"validateUser\"\n      }), \" function should solely be responsible for user validation. However, by utilizing function call cascading, we inadvertently introduce the responsibility of creating a user, sending emails, and so on.\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Testing\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"When conducting integration testing on the \", _jsx(_components.code, {\n        children: \"registerUser\"\n      }), \" function (or any other top-level entry point), it becomes necessary to mock the entire I/O environment to ensure\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"correct behavior. However, it would be preferable to conduct unit tests on the individual composed functions in isolation.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"As a result of the objective and responsibility coupling, when function call cascading is used, we find ourselves obligated to mock the environment for testing each of the composed functions as well.\"\n    }), \"\\n\", _jsxs(_components.blockquote, {\n      children: [\"\\n\", _jsx(_components.p, {\n        children: \"It's worth noting that certain languages, like Python with pytest fixtures, provide mechanisms that facilitate the mocking of intermediate functions.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Conclusion\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"In general, to enhance code reusability, testability, readability, and more, it is crucial to be self-conscious when encountering deep function call cascades.\\nTake a moment to consider whether the flow you are attempting to describe could be flattened and written as a recipe instead.\\nI firmly believe that by keeping a vigilant eye on this aspect, we can improve both our code and our overall development experiences.\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"But...\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"As most (interesting and fun) things in software, decisions on what is best depends on the context of the decision\\nand creating general rules is oversimplistic.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"As a counter example of my own post, there are some patterns that promote the use of function call cascading while\\nmaintaining the flexibility of the system.\\nFor example when we use \", _jsx(_components.a, {\n        href: \"https://refactoring.guru/design-patterns/chain-of-responsibility\",\n        children: \"Chain of responsibility\"\n      }), \" like\\nin middlewares, each middleware will call the next. But each of them are unaware of what middleware is next since\\nthat decision is taken in another component, and therefore the middlewares can be plugged together in any way.\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}},"markdown":"# Function call cascading considered harmful\n\n## Introduction\n\nImproving the reusability and composability of software components is a common goal we all strive for. However, more often than not, we find ourselves falling short without a clear understanding of why. Sometimes, we favor one approach over another without a solid rationale, labeling the differences as mere programming styles.\n\nIn my case, I have a preference for writing code that reads like recipes. I strive to develop functions or components as if they will be utilized by multiple clients, even if that's not the current scenario. This personal style offers benefits such as reusability and testability, but I have also realized that it tends to veer toward overengineering, so it's important to keep that in check.\n\nDuring a recent refactoring process, I encountered a situation where the code followed a different style, and I found it more challenging to reason about, test, and reuse. Yet, I couldn't pinpoint a specific term or a clear, general rationale to explain why I felt that way.\n\nUpon reflection, I discovered the root of the problem, and with the help of Chat GPT, I uncovered the terms associated with those distinct styles.\n\nTo illustrate the problem clearly and make it more apparent, I will provide an example.\n\n## The problem\n\nConsider a web application that processes user registrations. When a new user signs up, various tasks need to be performed, such as validating the user's data, creating a user account, sending a confirmation email, and logging the registration event.\n\n### Function call cascading\n\nOne way of implementing this functionality is using function call cascading.\nWe can visualize it as a sequence:\n\n```mermaid\n\n  sequenceDiagram\n\n  actor Client\n  participant registerUser\n  participant validateUser\n  participant createUser\n  participant sendConfirmationEmail\n  participant logRegistration\n\n  registerUser ->> validateUser: userData\n  validateUser ->> createUser: userData\n  createUser ->> sendConfirmationEmail: userData\n  sendConfirmationEmail ->> logRegistration: userData\n```\n\nAnd the code would look like:\n\n```javascript\nfunction registerUser(userData) {\n  validateUser(userData);\n}\n\nfunction validateUser(userData) {\n  if (userData.username && userData.email && userData.password) {\n    createUser(userData);\n  } else {\n    console.log(\"Invalid user data.\");\n  }\n}\n\nfunction createUser(userData) {\n  // Logic to create a user account\n\n  sendConfirmationEmail(userData);\n}\n\nfunction sendConfirmationEmail(userData) {\n  // Logic to send a confirmation email\n\n  logRegistration(userData);\n}\n\nfunction logRegistration(userData) {\n  // Logic to log the registration event\n\n  console.log(\"User registration completed.\");\n}\n```\n\nThe code will run in sequence, one function after another. If one function fails the next\none will not be executed.\n\nFrom a functional point of view, this works as expected and `registerUser` will do what\nit is intended to.\n\n### Function Orchestration\n\n> Function orchestration: a component organizes and decides the order and need to execute a given set\n> of functions. (I had some troubles naming this style. Let me know if there are better / existing names)\n\nAnother way to implement the same functionality is to use a recipe-like sequence of functions\nto be executed.\n\nAs a sequence it would look like:\n\n```mermaid\n\n  sequenceDiagram\n\n  actor Client\n  participant registerUser\n  participant validateUser\n  participant createUser\n  participant sendConfirmationEmail\n  participant logRegistration\n\n  registerUser ->> validateUser: userData\n  registerUser ->> createUser: userData\n  registerUser ->> sendConfirmationEmail: userData\n  registerUser ->> logRegistration: userData\n```\n\nAnd this is the code:\n\n```javascript\nfunction registerUser(userData) {\n  if (validateUser(userData)) {\n    createUser(userData);\n    sendConfirmationEmail(userData);\n    logRegistration(userData);\n    console.log(\"User registration completed.\");\n  } else {\n    console.log(\"Invalid user data.\");\n  }\n}\n\nfunction validateUser(userData) {\n  return userData.username && userData.email && userData.password;\n}\n\nfunction createUser(userData) {\n  // Logic to create a user account\n}\n\nfunction sendConfirmationEmail(userData) {\n  // Logic to send a confirmation email\n}\n\nfunction logRegistration(userData) {\n  // Logic to log the registration event\n}\n```\n\n## Analysis\n\nAlthough the example is very basic and might be obvious that something is off in the first example,\nI have seen this style in multiple projects I have worked on. Usually hidden in complex logic.\n\nIn the following subsections you can find some of the reasons why the second approach should be preferred.\n\n### Objective coupling\n\nWhen employing function call cascading, all functions become tightly coupled to the objectives of the functions they call down the line.\n\nFor instance, let's consider the `registerUser` function with the following goals:\n\n- Validate user\n- Create user\n- Send confirmation email\n- Log registration\n\nIn this case, the `validateUser` function will **inherit** the same goals as `registerUser`. Similarly, the `createUser` function will inherit all goals except for the validation of the user, and so on.\n\n```mermaid\n\nflowchart LR\n\nsubgraph Functions\n  registerUser\n  validateUser\n  createUser\n  sendConfirmationEmail\n  logRegistration\nend\n\nsubgraph Goals\n  validate-user[validate user]\n  create-user[create user]\n  send-confirmation-email[send confirmation email]\n  log-registration[log registration]\nend\n\nregisterUser --> validateUser\nregisterUser -.- validate-user\nregisterUser -.- create-user\nregisterUser -.- send-confirmation-email\nregisterUser -.- log-registration\n\n\nvalidateUser --> createUser\nvalidateUser -.->validate-user\nvalidateUser -.- create-user\nvalidateUser -.- send-confirmation-email\nvalidateUser -.- log-registration\n\n\ncreateUser --> sendConfirmationEmail\ncreateUser -.->create-user\ncreateUser -.- send-confirmation-email\ncreateUser -.- log-registration\n\n\nsendConfirmationEmail --> logRegistration\nsendConfirmationEmail -.->send-confirmation-email\nsendConfirmationEmail -.- log-registration\n\n\nlogRegistration -.->log-registration\n```\n\n```mermaid\n\nflowchart LR\n\nsubgraph Functions\n  registerUser\n  validateUser\n  createUser\n  sendConfirmationEmail\n  logRegistration\nend\n\nsubgraph Goals\n  validate-user[validate user]\n  create-user[create user]\n  send-confirmation-email[send confirmation email]\n  log-registration[log registration]\nend\n\nregisterUser --> validateUser\nregisterUser --> createUser\nregisterUser --> sendConfirmationEmail\nregisterUser --> logRegistration\n\nregisterUser -.- validate-user\nregisterUser -.- create-user\nregisterUser -.- send-confirmation-email\nregisterUser -.- log-registration\n\n\nvalidateUser -.->validate-user\n\ncreateUser -.->create-user\n\nsendConfirmationEmail -.->send-confirmation-email\n\nlogRegistration -.->log-registration\n```\n\nThis means that I cannot use any of the intermediate functions in a different context than the one aimed at achieving all those goals.\n\nI intentionally use the term **inherit** because the problem is reminiscent of the issues that arise when using inheritance for code reusability.\n\n### Single responsibility\n\nIn line with the issue of objective coupling, every function that calls another function becomes coupled with the responsibilities of the subsequent function. While this coupling may make sense in some cases, such as the `registerUser` function being responsible for all the effects (storing in a database, sending emails, etc.) related to user registration, even if it delegates each effect to a specific function.\n\nOn the other hand, the `validateUser` function should solely be responsible for user validation. However, by utilizing function call cascading, we inadvertently introduce the responsibility of creating a user, sending emails, and so on.\n\n### Testing\n\nWhen conducting integration testing on the `registerUser` function (or any other top-level entry point), it becomes necessary to mock the entire I/O environment to ensure\n\ncorrect behavior. However, it would be preferable to conduct unit tests on the individual composed functions in isolation.\n\nAs a result of the objective and responsibility coupling, when function call cascading is used, we find ourselves obligated to mock the environment for testing each of the composed functions as well.\n\n> It's worth noting that certain languages, like Python with pytest fixtures, provide mechanisms that facilitate the mocking of intermediate functions.\n\n## Conclusion\n\nIn general, to enhance code reusability, testability, readability, and more, it is crucial to be self-conscious when encountering deep function call cascades.\nTake a moment to consider whether the flow you are attempting to describe could be flattened and written as a recipe instead.\nI firmly believe that by keeping a vigilant eye on this aspect, we can improve both our code and our overall development experiences.\n\n### But...\n\nAs most (interesting and fun) things in software, decisions on what is best depends on the context of the decision\nand creating general rules is oversimplistic.\n\nAs a counter example of my own post, there are some patterns that promote the use of function call cascading while\nmaintaining the flexibility of the system.\nFor example when we use [Chain of responsibility](https://refactoring.guru/design-patterns/chain-of-responsibility) like\nin middlewares, each middleware will call the next. But each of them are unaware of what middleware is next since\nthat decision is taken in another component, and therefore the middlewares can be plugged together in any way.\n"}},"__N_SSG":true}